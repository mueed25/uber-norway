// Mixins

// Responsive breakpoint mixin
@mixin breakpoint($size) {
  @if $size == xs {
    @media (max-width: map-get($breakpoints, sm) - 1px) { @content; }
  }
  @if $size == sm {
    @media (min-width: map-get($breakpoints, sm)) { @content; }
  }
  @if $size == md {
    @media (min-width: map-get($breakpoints, md)) { @content; }
  }
  @if $size == lg {
    @media (min-width: map-get($breakpoints, lg)) { @content; }
  }
  @if $size == xl {
    @media (min-width: map-get($breakpoints, xl)) { @content; }
  }
}

// Button mixin
@mixin button-variant($bg-color, $text-color, $border-color: $bg-color) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $border-color;
  
  &:hover:not(:disabled) {
    background-color: darken($bg-color, 10%);
    border-color: darken($border-color, 10%);
  }
  
  &:active {
    background-color: darken($bg-color, 15%);
    border-color: darken($border-color, 15%);
  }
}

// Transition mixin
@mixin transition($properties...) {
  transition: $properties;
}

// Box shadow mixin
@mixin box-shadow($shadow) {
  box-shadow: $shadow;
}

// Border radius mixin
@mixin border-radius($radius) {
  border-radius: $radius;
}

// Flexbox center mixin
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Absolute center mixin
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Clearfix mixin
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Visually hidden mixin
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}