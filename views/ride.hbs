{{!-- trip.hbs - Trip Request Page Template --}}
<div class="trip1-container">
  {{!-- Left Panel - Form Area --}}
  <div class="trip1-left-panel">
    <div class="trip1-form-wrapper">
      <h2 class="trip1-title">Find a trip</h2>
      
      <form id="trip1-search-form" class="trip1-form" action="/trip" method="POST">
        {{!-- Pick-up Location --}}
        <div class="trip1-input-group">
          <div class="trip1-input-icon">
            <div class="trip1-pickup-dot"></div>
          </div>
          <input 
            type="text" 
            id="trip1-pickup" 
            name="pickup" 
            class="trip1-input" 
            placeholder="Pick-up location"
            value="{{pickup}}"
            required
            autocomplete="off"
          />
        </div>

        {{!-- Drop-off Location --}}
        <div class="trip1-input-group">
          <div class="trip1-input-icon">
            <div class="trip1-dropoff-square"></div>
          </div>
          <input 
            type="text" 
            id="trip1-dropoff" 
            name="dropoff" 
            class="trip1-input" 
            placeholder="Drop-off location"
            value="{{dropoff}}"
            required
            autocomplete="off"
          />
          <button type="button" class="trip1-add-stop">+</button>
        </div>

        {{!-- Time Picker --}}
        <div class="trip1-input-group">
          <div class="trip1-input-icon">
            <svg class="trip1-clock-icon" width="16" height="16" viewBox="0 0 24 24" fill="none">
              <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
              <polyline points="12,6 12,12 16,14" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <select class="trip1-select" name="pickupTime">
            <option value="now" {{#if (eq pickupTime 'now')}}selected{{/if}}>Pick up now</option>
            <option value="scheduled" {{#if (eq pickupTime 'scheduled')}}selected{{/if}}>Schedule for later</option>
          </select>
        </div>

        {{!-- For Me Dropdown --}}
        <div class="trip1-input-group">
          <div class="trip1-input-icon">
            <svg class="trip1-user-icon" width="16" height="16" viewBox="0 0 24 24" fill="none">
              <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2"/>
              <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <select class="trip1-select" name="rideFor">
            <option value="me" {{#if (eq rideFor 'me')}}selected{{/if}}>For me</option>
            <option value="someone" {{#if (eq rideFor 'someone')}}selected{{/if}}>For someone else</option>
          </select>
        </div>

        {{!-- Search Button --}}
        <button type="submit" class="trip1-search-btn" id="trip1-search-btn">
          <span class="trip1-btn-text">Search</span>
          <div class="trip1-loading-spinner" style="display: none;">
            <div class="trip1-spinner"></div>
          </div>
        </button>
      </form>
    </div>
  </div>

  {{!-- Middle Panel - Ride Results (Dynamic) --}}
  <div class="trip1-middle-panel {{#unless ride}}trip1-hidden{{/unless}}" id="trip1-middle-panel">
    {{#if ride}}
      <div class="trip1-ride-wrapper">
        <h3 class="trip1-ride-title">Choose a ride</h3>
        <p class="trip1-ride-subtitle">Rides we think you'll like</p>

        {{#each ride}}
          <div class="trip1-ride-card" data-ride-id="{{id}}" data-ride-type="{{type}}" data-ride-price="{{price}}">
            <!-- Car Icon -->
            <div class="trip1-car-icon">
              <svg width="40" height="24" viewBox="0 0 40 24" fill="none">
                <path d="M8 18C9.10457 18 10 17.1046 10 16C10 14.8954 9.10457 14 8 14C6.89543 14 6 14.8954 6 16C6 17.1046 6.89543 18 8 18Z" fill="currentColor"/>
                <path d="M32 18C33.1046 18 34 17.1046 34 16C34 14.8954 33.1046 14 32 14C30.8954 14 30 14.8954 30 16C30 17.1046 30.8954 18 32 18Z" fill="currentColor"/>
                <path d="M2 4L6 4L8 14L32 14L36 4L38 4C38.5523 4 39 4.44772 39 5C39 5.55228 38.5523 6 38 6L37 6L33 16L7 16L5 6L2 6C1.44772 6 1 5.55228 1 5C1 4.44772 1.44772 4 2 4Z" fill="currentColor"/>
              </svg>
            </div>

            <!-- Ride Info -->
            <div class="trip1-ride-info">
              <div class="trip1-ride-header">
                <span class="trip1-ride-type">{{type}}</span>
                <div class="trip1-rating">
                  <span class="trip1-rating-stars">â˜…</span>
                  <span class="trip1-rating-value">{{rating}}</span>
                </div>
              </div>
              <div class="trip1-ride-details">
                <span class="trip1-eta">{{eta}} mins away</span>
                <span class="trip1-arrival">{{arrivalTime}}</span>
              </div>
              <p class="trip1-ride-category">{{category}}</p>
            </div>

            <!-- Price -->
            <div class="trip1-ride-price">
              <span class="trip1-price-amount">{{price}}</span>
            </div>
          </div>
        {{/each}}

        {{!-- Centralized Action Buttons --}}
        <div class="trip1-action-buttons">
          <div class="trip1-selected-ride" id="trip1-selected-ride">
            <span class="trip1-selected-text">Select a ride to continue</span>
          </div>
          
          <form id="trip1-payment-form" action="/add-payment" method="POST" style="display: none;">
            <input type="hidden" name="rideId" id="trip1-ride-id">
            <input type="hidden" name="rideType" id="trip1-ride-type">
            <input type="hidden" name="ridePrice" id="trip1-ride-price">
            {{!-- Don't set initial values here, let JavaScript handle it --}}
            <input type="hidden" name="pickup" id="trip1-payment-pickup" value="">
            <input type="hidden" name="dropoff" id="trip1-payment-dropoff" value="">
            <button type="submit" class="trip1-payment-btn" id="trip1-payment-btn">
              <svg class="trip1-payment-icon" width="16" height="16" viewBox="0 0 24 24" fill="none">
                <rect x="1" y="4" width="22" height="16" rx="2" ry="2" stroke="currentColor" stroke-width="2"/>
                <line x1="1" y1="10" x2="23" y2="10" stroke="currentColor" stroke-width="2"/>
              </svg>
              Add Payment Method
            </button>
          </form>
          
          <form id="trip1-request-form" action="/request-ride" method="POST" style="display: none;">
            <input type="hidden" name="rideId" id="trip1-request-ride-id">
            <input type="hidden" name="rideType" id="trip1-request-ride-type">
            <input type="hidden" name="ridePrice" id="trip1-request-ride-price">
            {{!-- Don't set initial values here, let JavaScript handle it --}}
            <input type="hidden" name="pickup" id="trip1-request-pickup" value="">
            <input type="hidden" name="dropoff" id="trip1-request-dropoff" value="">
            <button type="submit" class="trip1-request-btn" id="trip1-request-btn">
              Request Ride
            </button>
          </form>
        </div>
      </div>
    {{/if}}
  </div>

  {{!-- Right Panel - Map --}}
  <div class="trip1-right-panel {{#if ride}}trip1-map-shrunk{{/if}}" id="trip1-map-panel">
    <div id="trip1-map-container" class="trip1-map">
      {{!-- Map will be rendered here by external map service --}}
      <div class="trip1-map-placeholder">
        <div id="map" class="map-container"></div>
      </div>
    </div>
  </div>
</div>

{{!-- Loading Overlay --}}
<div class="trip1-loading-overlay" id="trip1-loading-overlay" style="display: none;">
  <div class="trip1-loading-content">
    <div class="trip1-big-spinner"></div>
    <p>Finding the best rides for you...</p>
  </div>
</div>

<script>// Updated JavaScript for ride.hbs - place this in the script section
document.addEventListener('DOMContentLoaded', function() {
  const rideCards = document.querySelectorAll('.trip1-ride-card');
  const selectedRideDiv = document.getElementById('trip1-selected-ride');
  const paymentForm = document.getElementById('trip1-payment-form');
  const requestForm = document.getElementById('trip1-request-form');
  
  // Function to get current pickup/dropoff values
  function getCurrentLocationValues() {
    const pickup = document.getElementById('trip1-pickup').value.trim();
    const dropoff = document.getElementById('trip1-dropoff').value.trim();
    console.log('Current location values:', { pickup, dropoff });
    return { pickup, dropoff };
  }
  
  // Set initial values for hidden inputs when page loads
  function updateHiddenInputs() {
    const { pickup, dropoff } = getCurrentLocationValues();
    
    // Update payment form hidden inputs
    const paymentPickup = document.getElementById('trip1-payment-pickup');
    const paymentDropoff = document.getElementById('trip1-payment-dropoff');
    
    if (paymentPickup) paymentPickup.value = pickup;
    if (paymentDropoff) paymentDropoff.value = dropoff;
    
    // Update request form hidden inputs
    const requestPickup = document.getElementById('trip1-request-pickup');
    const requestDropoff = document.getElementById('trip1-request-dropoff');
    
    if (requestPickup) requestPickup.value = pickup;
    if (requestDropoff) requestDropoff.value = dropoff;
    
    console.log('Hidden inputs updated with:', { pickup, dropoff });
  }
  
  // Initialize values on page load
  setTimeout(updateHiddenInputs, 100); // Small delay to ensure DOM is ready
  
  // Update hidden inputs whenever pickup/dropoff fields change
  const pickupInput = document.getElementById('trip1-pickup');
  const dropoffInput = document.getElementById('trip1-dropoff');
  
  if (pickupInput) {
    pickupInput.addEventListener('input', updateHiddenInputs);
    pickupInput.addEventListener('change', updateHiddenInputs);
    pickupInput.addEventListener('blur', updateHiddenInputs);
  }
  
  if (dropoffInput) {
    dropoffInput.addEventListener('input', updateHiddenInputs);
    dropoffInput.addEventListener('change', updateHiddenInputs);
    dropoffInput.addEventListener('blur', updateHiddenInputs);
  }
  
  rideCards.forEach(card => {
    card.addEventListener('click', function() {
      // Remove active class from all cards
      rideCards.forEach(c => c.classList.remove('active'));
      
      // Add active class to clicked card
      this.classList.add('active');
      
      // Get ride data from clicked card
      const rideId = this.dataset.rideId;
      const rideType = this.dataset.rideType;
      const ridePrice = this.dataset.ridePrice;
      
      console.log('Ride card clicked:', { rideId, rideType, ridePrice });
      
      // Get current values from the form inputs
      const { pickup, dropoff } = getCurrentLocationValues();
      
      console.log('Ride selected with locations:', { rideId, rideType, ridePrice, pickup, dropoff });
      
      // Validate that pickup and dropoff are not empty
      if (!pickup || !dropoff) {
        alert('Please enter both pickup and dropoff locations before selecting a ride.');
        this.classList.remove('active');
        return;
      }
      
      // Update all hidden inputs immediately
      updateHiddenInputs();
      
      // Update ride-specific hidden inputs
      const rideIdInput = document.getElementById('trip1-ride-id');
      const rideTypeInput = document.getElementById('trip1-ride-type');
      const ridePriceInput = document.getElementById('trip1-ride-price');
      
      if (rideIdInput) rideIdInput.value = rideId;
      if (rideTypeInput) rideTypeInput.value = rideType;
      if (ridePriceInput) ridePriceInput.value = ridePrice;
      
      // Update request form hidden inputs
      const requestRideIdInput = document.getElementById('trip1-request-ride-id');
      const requestRideTypeInput = document.getElementById('trip1-request-ride-type');
      const requestRidePriceInput = document.getElementById('trip1-request-ride-price');
      
      if (requestRideIdInput) requestRideIdInput.value = rideId;
      if (requestRideTypeInput) requestRideTypeInput.value = rideType;
      if (requestRidePriceInput) requestRidePriceInput.value = ridePrice;
      
      console.log('All hidden inputs updated after ride selection');
      
      // Show forms
      if (paymentForm) paymentForm.style.display = 'block';
      if (selectedRideDiv) {
        selectedRideDiv.style.display = 'block';
        selectedRideDiv.innerHTML = `<span class="trip1-selected-text">Selected: ${rideType} - ${ridePrice}</span>`;
      }
    });
  });
  
  // Handle payment form submission with comprehensive validation
  if (paymentForm) {
    paymentForm.addEventListener('submit', function(e) {
      e.preventDefault(); // Prevent default form submission
      
      console.log('Payment form submission started...');
      
      // Update all values one final time before submission
      updateHiddenInputs();
      
      // Get current values at the exact moment of submission
      const { pickup, dropoff } = getCurrentLocationValues();
      
      // Get ride details
      const rideId = document.getElementById('trip1-ride-id')?.value;
      const rideType = document.getElementById('trip1-ride-type')?.value;
      const ridePrice = document.getElementById('trip1-ride-price')?.value;
      
      console.log('Final form data before submission:', {
        pickup, dropoff, rideId, rideType, ridePrice
      });
      
      // Comprehensive validation
      const missingFields = [];
      if (!pickup) missingFields.push('pickup location');
      if (!dropoff) missingFields.push('dropoff location');
      if (!rideId) missingFields.push('ride selection');
      if (!rideType) missingFields.push('ride type');
      if (!ridePrice) missingFields.push('ride price');
      
      if (missingFields.length > 0) {
        alert(`Please complete the following: ${missingFields.join(', ')}`);
        console.error('Form validation failed:', missingFields);
        return false;
      }
      
      // Prepare form data for submission
      const formData = new FormData();
      formData.append('rideId', rideId);
      formData.append('rideType', rideType);
      formData.append('ridePrice', ridePrice);
      formData.append('pickup', pickup);
      formData.append('dropoff', dropoff);
      
      console.log('Submitting form data via fetch...');
      
      // Use fetch to submit the form
      fetch('/add-payment', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        console.log('Response received:', response);
        
        // Check if response is JSON
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
          return response.json().then(data => {
            if (data.success && data.checkoutUrl) {
              console.log('Redirecting to Stripe checkout:', data.checkoutUrl);
              window.location.href = data.checkoutUrl;
            } else {
              throw new Error(data.message || 'Payment initialization failed');
            }
          });
        } else {
          // Handle HTML response (redirect page)
          return response.text().then(html => {
            // Create a temporary div to hold the HTML
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;
            document.body.innerHTML = html;
            
            // If the HTML contains a script, execute it
            const scripts = tempDiv.querySelectorAll('script');
            scripts.forEach(script => {
              const newScript = document.createElement('script');
              newScript.textContent = script.textContent;
              document.head.appendChild(newScript);
            });
          });
        }
      })
      .catch(error => {
        console.error('Payment submission error:', error);
        alert('Payment initialization failed: ' + error.message);
      });
      
      return false; // Prevent any default form submission
    });
  }
  
  // Debug: Log initial state
  console.log('Page loaded. Initial values:', getCurrentLocationValues());
  
  // Debug: Log all form inputs periodically
  setInterval(() => {
    const pickup = document.getElementById('trip1-pickup')?.value;
    const dropoff = document.getElementById('trip1-dropoff')?.value;
    const paymentPickup = document.getElementById('trip1-payment-pickup')?.value;
    const paymentDropoff = document.getElementById('trip1-payment-dropoff')?.value;
    
    if (pickup !== paymentPickup || dropoff !== paymentDropoff) {
      console.log('Form sync issue detected:', {
        visible: { pickup, dropoff },
        hidden: { paymentPickup, paymentDropoff }
      });
      updateHiddenInputs();
    }
  }, 2000);
});</script>